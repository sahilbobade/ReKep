```python
# The task involves reorienting the spray bottle and dropping it upright into the black pen holder.
# This can be broken down into three stages:
# 1. Grasp the spray bottle.
# 2. Reorient the spray bottle to be upright.
# 3. Drop the spray bottle upright into the pen holder.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the spray bottle (keypoint 5)."""
    return np.linalg.norm(end_effector - keypoints[5])

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The spray bottle (keypoint 5) is upright (parallel to the z-axis)."""
    spray_vector = keypoints[5] - keypoints[2]
    z_axis = np.array([0, 0, 1])
    return np.arccos(np.dot(spray_vector, z_axis) / (np.linalg.norm(spray_vector) * np.linalg.norm(z_axis)))

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the spray bottle (keypoint 5)."""
    return get_grasping_cost_by_keypoint_idx(5)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The spray bottle (keypoint 5) must still stay upright (parallel to the z-axis)."""
    spray_vector = keypoints[5] - keypoints[2]
    z_axis = np.array([0, 0, 1])
    return np.arccos(np.dot(spray_vector, z_axis) / (np.linalg.norm(spray_vector) * np.linalg.norm(z_axis)))

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The spray bottle (keypoint 5) is 10cm above the pen holder (keypoint 8)."""
    offsetted_point = keypoints[8] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[5] - offsetted_point)

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the spray bottle (keypoint 5)."""
    return get_grasping_cost_by_keypoint_idx(5)

grasp_keypoints = [5, -1, -1]
release_keypoints = [-1, -1, 5]
```