```python
# The task involves picking up the red water bottle and pouring water into the black holder.
# This can be broken down into three stages:
# 1. Grasp the red water bottle.
# 2. Align the bottle with the black holder.
# 3. Pour water into the black holder.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red water bottle (keypoint 2)."""
    return np.linalg.norm(end_effector - keypoints[2])

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The bottle spout (keypoint 3) needs to be 10cm above the holder opening (keypoint 1)."""
    offsetted_point = keypoints[1] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[3] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red water bottle (keypoint 2)."""
    return get_grasping_cost_by_keypoint_idx(2)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The bottle spout (keypoint 3) needs to be 5cm above the holder opening (keypoint 1)."""
    offsetted_point = keypoints[1] + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[3] - offsetted_point)

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The bottle spout (keypoint 3) must be tilted to pour water."""
    # Assuming a tilt is represented by the spout being lower than the base (keypoint 2).
    return keypoints[3][2] - keypoints[2][2]

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red water bottle (keypoint 2)."""
    return get_grasping_cost_by_keypoint_idx(2)

def stage3_path_constraint2(end_effector, keypoints):
    """The bottle spout (keypoint 3) is directly above the holder opening (keypoint 1)."""
    return np.linalg.norm(keypoints[3][:2] - keypoints[1][:2])

grasp_keypoints = [2, -1, -1]
release_keypoints = [-1, -1, 2]
```