```python
# The task involves picking up the white teapot and pouring tea into the black cup.
# This can be broken down into three stages:
# 1. Grasp the white teapot.
# 2. Align the teapot with the black cup opening.
# 3. Pour tea into the black cup.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the teapot handle (keypoint 6)."""
    return np.linalg.norm(end_effector - keypoints[6])

### stage 1 path constraints
# No path constraints for grasping stage

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The teapot spout (keypoint 3) needs to be 10cm above the cup opening (keypoint 4)."""
    offsetted_point = keypoints[4] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[3] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the teapot handle (keypoint 6)."""
    return get_grasping_cost_by_keypoint_idx(6)

def stage2_path_constraint2(end_effector, keypoints):
    """The teapot must stay upright to avoid spilling."""
    teapot_upright_vector = keypoints[3] - keypoints[6]
    return np.abs(np.dot(teapot_upright_vector, np.array([0, 0, 1])) - np.linalg.norm(teapot_upright_vector))

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The teapot spout (keypoint 3) needs to be 5cm above the cup opening (keypoint 4)."""
    offsetted_point = keypoints[4] + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[3] - offsetted_point)

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The teapot spout (keypoint 3) must be tilted to pour liquid."""
    teapot_tilt_vector = keypoints[3] - keypoints[6]
    return np.abs(np.dot(teapot_tilt_vector, np.array([0, 0, 1])))

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the teapot handle (keypoint 6)."""
    return get_grasping_cost_by_keypoint_idx(6)

def stage3_path_constraint2(end_effector, keypoints):
    """The teapot spout (keypoint 3) is directly above the cup opening (keypoint 4)."""
    return np.linalg.norm(keypoints[3][:2] - keypoints[4][:2])

grasp_keypoints = [6, -1, -1]
release_keypoints = [-1, -1, 6]
```