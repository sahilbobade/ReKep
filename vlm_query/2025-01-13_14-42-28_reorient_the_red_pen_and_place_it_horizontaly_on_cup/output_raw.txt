```python
# The task involves reorienting the red pen and placing it horizontally on the cup.
# There are 3 stages involved in this task:
# 1. Grasp the red pen.
# 2. Reorient the red pen to be horizontal.
# 3. Place the red pen horizontally on the cup.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red pen (keypoint 2)."""
    return np.linalg.norm(end_effector - keypoints[2])

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The red pen (keypoint 2) is horizontal (parallel to the table surface)."""
    pen_vector = keypoints[2] - keypoints[0]  # Assuming keypoint 0 is a reference on the table
    horizontal_vector = np.array([1, 0, 0])  # Parallel to the x-axis
    return np.abs(np.dot(pen_vector, horizontal_vector) / np.linalg.norm(pen_vector))

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red pen (keypoint 2)."""
    return get_grasping_cost_by_keypoint_idx(2)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The red pen (keypoint 2) is horizontally placed on the cup (keypoints 4, 5, 6)."""
    cup_center = np.mean(keypoints[4:7], axis=0)
    offsetted_point = cup_center + np.array([0, 0, 0.5])  # Slightly above the cup
    return np.linalg.norm(keypoints[2] - offsetted_point)

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red pen (keypoint 2)."""
    return get_grasping_cost_by_keypoint_idx(2)

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [2, -1, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, -1, 2]
```