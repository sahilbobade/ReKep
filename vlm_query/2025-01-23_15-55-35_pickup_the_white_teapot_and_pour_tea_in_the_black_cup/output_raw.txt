```python
# The task involves picking up the white teapot and pouring tea into the black cup.
# There are 3 stages involved in this task:
# 1. Grasp the teapot.
# 2. Align the teapot with the cup opening.
# 3. Pour the tea into the cup.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the teapot handle (keypoint 2)."""
    return np.linalg.norm(end_effector - keypoints[2])

### stage 1 path constraints
# No path constraints for grasping stage

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The teapot spout (keypoint 1) needs to be 10cm above the cup opening (keypoint 5)."""
    offsetted_point = keypoints[5] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[1] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the teapot handle (keypoint 2)."""
    return get_grasping_cost_by_keypoint_idx(2)

def stage2_path_constraint2(end_effector, keypoints):
    """The teapot must stay upright to avoid spilling."""
    z_axis = np.array([0, 0, 1])
    teapot_vector = keypoints[1] - keypoints[2]
    angle = np.arccos(np.dot(teapot_vector, z_axis) / (np.linalg.norm(teapot_vector) * np.linalg.norm(z_axis)))
    return np.abs(angle)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The teapot spout (keypoint 1) needs to be 5cm above the cup opening (keypoint 5)."""
    offsetted_point = keypoints[5] + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[1] - offsetted_point)

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The teapot spout (keypoint 1) must be tilted to pour liquid."""
    z_axis = np.array([0, 0, 1])
    teapot_vector = keypoints[1] - keypoints[2]
    angle = np.arccos(np.dot(teapot_vector, z_axis) / (np.linalg.norm(teapot_vector) * np.linalg.norm(z_axis)))
    return np.abs(angle - np.pi/4)  # Tilt by 45 degrees

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the teapot handle (keypoint 2)."""
    return get_grasping_cost_by_keypoint_idx(2)

def stage3_path_constraint2(end_effector, keypoints):
    """The teapot spout (keypoint 1) is directly above the cup opening (keypoint 5)."""
    return np.linalg.norm(keypoints[1][:2] - keypoints[5][:2])

grasp_keypoints = [2, -1, -1]
release_keypoints = [-1, -1, 2]
```