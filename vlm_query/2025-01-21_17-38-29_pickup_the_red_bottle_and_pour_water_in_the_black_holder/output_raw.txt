```python
# The task involves picking up the red bottle and pouring water into the black holder.
# This can be broken down into three stages:
# 1. Grasp the red bottle.
# 2. Align the red bottle with the black holder.
# 3. Pour water from the red bottle into the black holder.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the red bottle (keypoint 3)."""
    return np.linalg.norm(end_effector - keypoints[3])

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The red bottle (keypoint 3) needs to be 10cm above the black holder opening (keypoint 1)."""
    offsetted_point = keypoints[1] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[3] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 3)."""
    return get_grasping_cost_by_keypoint_idx(3)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The red bottle (keypoint 3) needs to be tilted to pour water."""
    # Assuming tilting involves a specific angle, we can use a vector approach.
    bottle_vector = keypoints[3] - end_effector
    desired_vector = np.array([0, 0, -1])  # Assuming pouring downwards
    angle = np.arccos(np.dot(bottle_vector, desired_vector) / 
                      (np.linalg.norm(bottle_vector) * np.linalg.norm(desired_vector)))
    return angle - np.pi / 4  # Assuming a 45-degree tilt is needed

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the red bottle (keypoint 3)."""
    return get_grasping_cost_by_keypoint_idx(3)

def stage3_path_constraint2(end_effector, keypoints):
    """The red bottle (keypoint 3) spout is directly above the black holder opening (keypoint 1)."""
    return np.linalg.norm(keypoints[3][:2] - keypoints[1][:2])

grasp_keypoints = [3, -1, -1]
release_keypoints = [-1, -1, 3]
```