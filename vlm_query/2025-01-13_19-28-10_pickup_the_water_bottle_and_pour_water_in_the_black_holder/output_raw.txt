```python
# The task involves picking up a water bottle and pouring water into a black holder.
# This can be broken down into the following stages:
# 1. Grasp the water bottle.
# 2. Align the bottle with the black holder.
# 3. Pour water into the black holder.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the water bottle (keypoint 5)."""
    return np.linalg.norm(end_effector - keypoints[5])

### stage 1 path constraints
# No path constraints for grasping stage

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 5) needs to be 10cm above the black holder (keypoint 7)."""
    offsetted_point = keypoints[7] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[5] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the water bottle (keypoint 5)."""
    return get_grasping_cost_by_keypoint_idx(5)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The bottle (keypoint 5) needs to be tilted to pour water."""
    # Assuming tilting involves a specific angle, we can use a vector approach
    bottle_vector = keypoints[5] - keypoints[1]  # Example vector from base to top
    desired_vector = np.array([0, 0, -1])  # Tilt downwards
    angle = np.arccos(np.dot(bottle_vector, desired_vector) / 
                      (np.linalg.norm(bottle_vector) * np.linalg.norm(desired_vector)))
    return angle - np.pi / 4  # Example angle threshold

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the water bottle (keypoint 5)."""
    return get_grasping_cost_by_keypoint_idx(5)

def stage3_path_constraint2(end_effector, keypoints):
    """The bottle spout (keypoint 5) is directly above the black holder (keypoint 7)."""
    return np.linalg.norm(keypoints[5][:2] - keypoints[7][:2])

grasp_keypoints = [5, -1, -1]
release_keypoints = [-1, -1, 5]
```