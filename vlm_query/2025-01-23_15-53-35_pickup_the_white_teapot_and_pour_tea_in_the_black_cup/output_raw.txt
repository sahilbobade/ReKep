```python
# The task involves picking up the white teapot and pouring tea into the black cup.
# This can be broken down into three stages:
# 1. Grasp the teapot.
# 2. Align the teapot with the cup opening.
# 3. Pour the tea into the cup.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the teapot handle (keypoint 4)."""
    return np.linalg.norm(end_effector - keypoints[4])

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The teapot spout (keypoint 6) needs to be 10cm above the cup opening (keypoint 7)."""
    offsetted_point = keypoints[7] + np.array([0, 0, 0.1])
    return np.linalg.norm(keypoints[6] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the teapot handle (keypoint 4)."""
    return get_grasping_cost_by_keypoint_idx(4)

def stage2_path_constraint2(end_effector, keypoints):
    """The teapot must stay upright to avoid spilling."""
    teapot_upright_vector = keypoints[6] - keypoints[3]
    return np.abs(np.dot(teapot_upright_vector, np.array([0, 0, 1])) - np.linalg.norm(teapot_upright_vector))

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The teapot spout (keypoint 6) needs to be 5cm above the cup opening (keypoint 7)."""
    offsetted_point = keypoints[7] + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[6] - offsetted_point)

def stage3_subgoal_constraint2(end_effector, keypoints):
    """The teapot spout (keypoint 6) must be tilted to pour liquid."""
    teapot_tilt_vector = keypoints[6] - keypoints[3]
    return np.abs(np.dot(teapot_tilt_vector, np.array([0, 0, 1])))

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the teapot handle (keypoint 4)."""
    return get_grasping_cost_by_keypoint_idx(4)

def stage3_path_constraint2(end_effector, keypoints):
    """The teapot spout (keypoint 6) is directly above the cup opening (keypoint 7)."""
    return np.linalg.norm(keypoints[6][:2] - keypoints[7][:2])

grasp_keypoints = [4, -1, -1]
release_keypoints = [-1, -1, 4]
```